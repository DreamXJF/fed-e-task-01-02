### v8 垃圾回收
##### 1.内存管理
- 内存：由可读写单元组成，表示一片可操作空间
- 管理：人为的去操作一片空间的申请、使用和释放
- 内存管理：开发者主动申请空间、使用空间、释放空间
- 管理流程：申请=>使用=>释放
##### 2.JS中的内存管理

    // 申请
    let obj = {}
    // 使用
    obj.name = 'yg'
    // 释放
    obj = null    

##### 3. 引用计数算法
- 原理
 - 设置引用计数器，判断当前引用的数是否为0
 - 引用关系改变时修改引用数字
 - 引用数字为0时立即回收
- 优缺点
 - 发现垃圾立即回收，最大限度减少程序暂停
 - 无法回收循环引用的对象
 - 时间开销大
##### 4. 标记清除算法
- 原理
 - 核心思想：分标记和清除两个阶段
 - 遍历所有对象标记活动对象（可达）
 - 遍历所有对象清除没有标记的对象，并会清除所有标记
 - 回收相应的空间
- 优缺点
 - 可以回收循环引用的对象
 - 会导致空间碎片化
##### 5. 标记整理算法
- 原理
 - 标记整理可以看作是标记清除的增强
 - 标记阶段的操作和标记清除一致
 - 清除阶段会先执行整理，移动对象位置
##### 6. V8引擎
- 主流的javascript执行引擎
- v8采用即时编译，速度很快
- V8内存设限 （64位不超过1.5G，32位不超过800M）
 - 专门针对浏览器设置，对web应用来说够用了
 - 有垃圾回收机制决定，如果内存再大一些，回收时间会超过用户的感知时间
##### 7. V8垃圾回收策略
- 采用分代回收的思想
- 内存分为新生代、老生代
- 针对不同对象采用不同算法
- V8常用GC算法
 - 分代回收
 - 空间复制
 - 标记清除
 - 标记整理
 - 标记增量
##### 8. V8回收新生代对象
![Alt text](./1590651343251.jpg)
- V8内存分配
 - V8内存空间一分为二
 - 左侧用于存储新生代对象（64位 32M | 32位 16M）
 - 新生代对象指存活时间较短的对象（比如 函数作用域内的对象）
- 新生代回收原理
 - 采用复制算法 + 标记算法
 - 新生代内存区分为两个等大小空间
 - 使用空间位From，空闲空间为To
 - 活动对象存储于From空间
 - 触发GC机制后，标记整理From空间对象后将活动对象拷贝到To空间
 - From 和To交换空间完成释放
- 回收细节说明
 - 拷贝过程中可能出现晋升
 - 晋升就是将新生代对象移动到老生代
 - 一轮GC还存活的新生代需要晋升
 - To空间的使用率超过25%也会晋升（To空间如果使用超过一定限制，那么将来它变成from空间时可能会出现内存不够的情况）
##### 9. V8老生代对象回收
- 老生代对象存放在右侧来生代区
- 64位操作系统1.4G，32位操作系统700M
- 老生代对象指活动时间较长的对象（全局对象，闭包里的对象）
- 老生代回收实现：
 - 主要采用标记清除、标记整理、增量标记算法
 - 首先使用标记算法完成垃圾空间的回收
 - 采用标记整理进行空间优化（当新生代想要晋升，出现空间不足的情况，就会触发标记整理）
 - 采用增量标记进行效率优化

- 细节对比
 - 新生代采用空间换时间（直接复制交换释放）
 - 老生代区域垃圾回收不适合复制算法（存储数据大）
- 增量标记如何优化垃圾回收
 - 程序执行与标记交替进行（先标记第一层可达对象，第二轮标记第一层可达对象子对象）
![Alt text](./2.jpg)